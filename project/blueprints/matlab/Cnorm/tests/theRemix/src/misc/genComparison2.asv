function [res, vMax] = genComparison2(cMatrix, p, err_a, sMax, vMax3)

if p == 1
    res = p1(cMatrix);
    vMax = zero(0,0);
    return
end

cMatrixPrime = cMatrix';


q = 1 / (1 - 1/p);

error = 1; %#ok<NASGU>
res = 0; %#ok<NASGU>



colSize = length(cMatrix(1,:));



if nargin == 5
    if vMax
    f = randn(colSize, sMax,"like",1i);
    x = [f,vMax3];
    clear f

else 

    x = randn(colSize, sMax,"like",1i);

end



xNorm = vectorPNorm(x, p);
x = x ./ xNorm;
oldGuess = 0;

while (true)
    
    y = cMatrix * x;
    
    yDual = (abs(y).^ (p-1)) .* (sign(y));
    
    yDual =  yDual ./ vectorPNorm(yDual, q);
    

   [guess, index] = max(vectorPNorm(y, p));
    
    
    if abs(guess - oldGuess) < err_a
        vMax = x(:, index);
        % vMax = y;
        break;



        
    end

    z = cMatrixPrime * yDual;
    zDual = (abs(z).^ (q-1)) .* (sign(z));
    zDual =  zDual ./ vectorPNorm(zDual, p);

    x = zDual;
    oldGuess = guess;

    if isnan(guess)
        fprintf("Floating Point Error \n")
        vMax = 0 .* y;
        res = 0;
        return
    end 
end

res = guess;

end 
